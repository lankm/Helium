# This is a comment. It must have a pound sign at the begining and end #

# Character Mapping
  - !:
  - ": Strings
  - #: Comment
  - $:
  - %: Math
  - &:
  - ': Characters
  - (:
  - ):
  - *: Math Boolean
  - +: Math Boolean
  - ,: Data
  - -: Math Boolean
  - .:
  - /:
  - 0: User-Defined
  ...
  - :: Types
  - ;: Code
  - <: Types Boolean
  - =: Assignment
  - >: Types Boolean
  - ?:
  - @:
  - A: User-Defined
  ...
  - [: Data
  - \: Math
  - ]: Data
  - ^: Math Boolean
  - _: User-Defined
  - `:
  - a: User-Defined
  ...
  - {: Code
  - |:
  - }: Code
  - ~:
#
#
  PARADIGM
  [ ] STRUCTURED
    [x] Sequence     {a;b;c;}
    [ ] Repetition   for, while
    [x] Selection    ? c : {} ! {}
    [x] Subroutine   f(x:T):T = {f = 2*x}
  [ ] OBJECT ORIENTED
    [ ] Encapsulation class
    [ ] Abstraction   abstract
    [ ] Inheritance   extend
    [ ] Polymorphism  
  [ ] FUNCTIONAL
    [ ] Immutability const
    [ ] Pure Functions
    [ ] Higher Order Functions
  [ ] OWNERSHIP
    [ ] own
    [ ] borrow

  MATHMATICS
  [ ] NUMBER THEORY
  [ ] GEOMETRY
  [ ] ALGEBRA
    [ ] Boolean
    [ ] Linear
  [ ] DISCRETE
    [ ] Graph
  [ ] SET THEORY
  [ ] LOGIC
  [ ] PROBABILITY & STATISTICS

  SCIENCE
  [ ] Units
  [ ] Tests
  [ ] Logging
#
#
  ? conditional
    : {}
    ! {}
  ==
  <=
  >=
  <
  >
  |
  &
  ^
  !

  +
  -
  *
  /
  %
  <<
  >>

  =

  +=
  -=
  *=
  /=
  --
  ++
#
{
  # An identifier is a location in memory #
  # A type defines the size in memory #

  identifier: type<generic> = value;
  identifier(parameter: type<generic>): type<generic> = {};
  identifier: type<generic> = identifier(argument);

  sub(a: int, b: int): int = {
    sub = a-b
  };

  fibonacci(n: int): int = {
    ?  n<=0 : 
      {fibonacci = 0}
    !? n==1 :
      {fibonacci = 1}
    ! 
      {fibonacci = fibonacci(n-1) + fibonacci(n-2)}
  };

  factorial(n: int): int = {
    ? n<0 :
      {factorial = -1}
    !? n==0 :
      {factorial = 1}
    !
      {factorial = factorial(n-1)*n}
  }
}

